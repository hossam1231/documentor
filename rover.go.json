{
  "packageName": "main",
  "imports": [],
  "structs": [
    "Message"
  ],
  "variables": [
    "struct"
  ],
  "constants": [],
  "comments": [
    " Your logic to convert file content to markdown goes here",
    " For simplicity, let's just add a markdown extension to the original filename",
    " Skip processing .md files",
    " Wrap the content with the specified markdown code block without the dot in the file extension",
    " Read Markdown file content",
    " Create messages slice",
    " Prepare input JSON",
    " Create HTTP request",
    " Set Authorization and Content-Type headers",
    " Make the request",
    " Unmarshal JSON response into the result struct",
    " Append the response to the Markdown file",
    " Update the Markdown file",
    " Skip comments and empty lines",
    " Find the nearest .gitignore file",
    " Check if the file should be ignored based on .gitignore rules",
    " Check if the file is within a . folder",
    " Check if the file is an .md file, image, or video",
    " Check if the file is an .mod file",
    " Check if the file is an .sum file",
    " func processFile(path string, info os.FileInfo, err error) error {",
    " \tif err != nil {",
    " \t\treturn err",
    " \t}",
    " \tif info.IsDir() {",
    " \t\treturn nil",
    " \tmdFilename := convertToMarkdown(path)",
    " \tfmt.Printf(\"Copying %s to %s\\n\", path, mdFilename)",
    " \tfileExtension := strings.TrimPrefix(filepath.Ext(path), \".\")",
    " \tif err := copyFileWithCodeBlock(path, mdFilename, fileExtension); err != nil {",
    " \tif err := sendToCloudflare(mdFilename); err != nil {",
    "        log.Fatal(err)",
    " \treturn nil",
    " }"
  ],
  "interfaces": [],
  "methods": [],
  "channels": [],
  "errorHandling": [
    "gitignorePath",
    "err",
    "findNearestGitignore",
    "matches",
    "isPathIgnored"
  ],
  "typeAssertions": [],
  "controlFlow": [],
  "deferStatements": [],
  "panicRecover": [],
  "functionCalls": [
    "convertToMarkdown",
    "TrimSuffix",
    "copyFileWithCodeBlock",
    "ReadFile",
    "Sprintf",
    "WriteFile",
    "sendToCloudflare",
    "Marshal",
    "NewRequest",
    "Set",
    "Do",
    "Fatalf",
    "Close",
    "ReadAll",
    "Println",
    "Unmarshal",
    "string",
    "findNearestGitignore",
    "Join",
    "Stat",
    "Dir",
    "isPathIgnored",
    "Split",
    "HasPrefix",
    "Match",
    "processFile",
    "Panicln",
    "Printf",
    "Contains",
    "Ext",
    "IsDir",
    "TrimPrefix",
    "Fatal",
    "main",
    "len",
    "Walk"
  ]
}